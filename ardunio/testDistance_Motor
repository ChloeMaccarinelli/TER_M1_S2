
/* 
 * Code de calcul de la distance entre le capteur et l'obstacle
 */
#include <Wire.h>
#include <Adafruit_MotorShield.h>

/* On initialise les broches trigger et echo*/
const byte TRIGGER_PIN = 2; // Broche TRIGGER
const byte ECHO_PIN = 3;    // Broche ECHO

/* Vitesse du son  en mm/us */
const float VITESSE_SON = 340.0 / 1000;

/* Constantes pour le timeout */
const unsigned long TIMEOUT = 13000UL; // 13ms = ~4m à 340m/s

/* initialisation */

const int motorSpeed = 200; // de 0 (off) a 255 (max)

// Create the motor shield object with the default I2C address
Adafruit_MotorShield AFMS = Adafruit_MotorShield();
// Or, create it with a different I2C address (say for stacking)
// Adafruit_MotorShield AFMS = Adafruit_MotorShield(0x61); 

// Motor 4 -> left / Motor 2 -> right
Adafruit_DCMotor *motorLeft = AFMS.getMotor(1);
// Adafruit_DCMotor *motorRight = AFMS.getMotor(2);

void setupMotor(){
  // Left wheel
  Serial.println("init motor");
  motorLeft->setSpeed(motorSpeed);
  motorLeft->run(FORWARD);
  motorLeft->run(RELEASE);
  Serial.println("OK");
}

void leftForward(){
  Serial.println("Left forward");
  motorLeft->run(FORWARD);
  delay(5000);
  motorLeft->run(RELEASE);
  Serial.println("OK");
}

void leftBackward(){
  Serial.println("Left backward");
  motorLeft->run(BACKWARD);
  delay(5000);
  motorLeft->run(RELEASE);
  Serial.println("OK");
}
/*
void leftStop(){

}*/

void setup() {

  /* Initialise le port série */
  Serial.begin(9600);
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

  // initialise le moteur
  AFMS.begin();
  setupMotor();

  Serial.println("init capteur");
  /* Initialise les broches trigger et echo */
  pinMode(TRIGGER_PIN, OUTPUT);
  digitalWrite(TRIGGER_PIN, LOW);
  pinMode(ECHO_PIN, INPUT);
  Serial.println("OK");
}

 /* lancement */
void loop() {

calculDistance(TRIGGER_PIN, ECHO_PIN);

}

float calculDistance(byte TRIGGER_PIN, byte ECHO_PIN){

  /* on lance le calcul de distance en envoyant une impulsion de niveau haut de 10µs sur  TRIGGER */
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);

  /*  on mesure le temps entre l'envoi de l'impulsion  et son renvoi si un obstacle existe */
  long mesure_envoi_reception = pulseIn(ECHO_PIN, HIGH, TIMEOUT);

  /* Calcul de la distance en mm*/
  float distance = mesure_envoi_reception / 2.0 * VITESSE_SON;

  /* Affiche les résultats en mm*/
  Serial.print(F("Distance: "));
  Serial.print(distance);
  Serial.println(F("mm "));

  if (distance < 1000){
    leftForward();
  }else{
    leftBackward();
  }

  /* Délai pour ne pas spamer l'affichage des résultats */
  delay(6000);
}